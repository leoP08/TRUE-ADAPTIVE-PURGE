##-------------------------------------------------------------------------------------------------------------------##
##-------------------------------------------------------------------------------------------------------------------##
[gcode_macro _TRUE_ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your first printed point
variable_verbose_enable: False
variable_purge_height: 0.5         # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 2           # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract.
variable_purge_margin: 5           # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 10          # Amount of filament to be purged prior to printing.
variable_flow_rate: 12             # Flow rate of purge in mm3/s. Default is 12.

gcode:
    {% set SKIP_PURGE = False %}
    # Get bed size
    {% set x_bed = printer.toolhead.axis_maximum.x | float %}

    # Calculate size of print area
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set printZone_x_min = (all_points | map(attribute=0) | min | default(0)) %}                      # print area - x min
    {% set printZone_x_max = (all_points | map(attribute=0) | max | default(0)) %}                      # print area - x max
    {% set printZone_y_min = (all_points | map(attribute=1) | min | default(0)) %}                      # print area - y min
    {% set printZone_y_max = (all_points | map(attribute=1) | max | default(0)) %}                      # print area - y max

    # Get first print point
    {% set firstP_x = params.X | float %}
    {% set firstP_y = params.Y | float %}


    # Caculate position of first print point
    {% set delta_x = ( [(firstP_x - printZone_x_min), (printZone_x_max - firstP_x)] | min ) %}
    {% set delta_y = ( [(firstP_y - printZone_y_min), (printZone_y_max - firstP_y)] | min ) %}


    # Compare X and Y side to find shorter path
    # and calculate position of the Purge Line (first Point, second Point).
    {% if delta_x <= delta_y 
        and (firstP_x - printZone_x_min) <= (printZone_x_max - firstP_x) 
        and (printZone_x_min > (purge_margin + 10)) %}
        # First point closer to LEFT side 
        # and have enough distance to left side of the bed

            {% set purgeSecondX = (printZone_x_min - purge_margin) | round(3) | float %}
            {% set purgeFirstX = (purgeSecondX - 10) | round(3) | float %}

            {% set purgeFirstY = firstP_y | round(3) | float %}
            {% set purgeSecondY = purgeFirstY | round(3) | float %}
    

    {% elif delta_x <= delta_y 
        and (firstP_x - printZone_x_min) > (printZone_x_max - firstP_x) 
        and ((printZone_x_max + purge_margin + 10) < x_bed) %}
        # First point closer to RIGHT side 
        # and have enough distance to right side of the bed

            # purge right side of print area
            {% set purgeSecondX = (printZone_x_max + purge_margin) | round(3) | float %}
            {% set purgeFirstX = (purgeSecondX + 10) | round(3) | float %}

            {% set purgeFirstY = firstP_y | round(3) | float %}
            {% set purgeSecondY = purgeFirstY | round(3) | float %}


    {% elif delta_x > delta_y  %}  # If first point closer to UPPER or BOTTOM side
                # or not enough area to purge on X axis
                # purge will be on Y axis

        # X is same in both case
        {% set purgeFirstX = firstP_x | round(3) | float %}
        {% set purgeSecondX = firstP_x | round(3) | float %}

        {% if (firstP_y - printZone_y_min) <= (printZone_y_max - firstP_y) %}
            # purge on bottom side of print area
            {% set purgeSecondY = (printZone_y_min - purge_margin) | round(3) | float %}
            {% set purgeFirstY = (purgeSecondY - 10) | round(3) | float %}

        {% else %}
            # purge on upper side of print area
            {% set purgeSecondY = (printZone_y_max + purge_margin) | round(3) | float %}
            {% set purgeFirstY = (purgeSecondY + 10) | round(3) | float %}

        {% endif %}

    {% else %}

        {% set SKIP_PURGE = True %}

    {% endif %}

    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

    # Check config extrude cross section
    {% if cross_section < 5 %}

        {action_respond_info("[PURGE SKIPPED] Extruder 'max_extrude_cross_section' need to be 5 or greater.")}

    {% elif SKIP_PURGE is False %}

        {% if verbose_enable is True %}
        {action_respond_info("[ADAPTIVE PURGE] line start from ({}, {}) to ({}, {}), requested flow rate is {}mm3/s.".format(                                                                 
            (purgeFirstX),
            (purgeFirstY),
            (purgeSecondX),
            (purgeSecondY),
            (flow_rate),
        )) }
        {% endif %}

        # Calculate purge speed
        {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

        # Use firmware retraction if it is defined
        {% if printer.firmware_retraction is defined %}
            {% if verbose_enable is True %}
                {action_respond_info("[ADAPTIVE PURGE] is using firmware retraction.")}
            {% endif %}

            {% set RETRACT = G10 | string %}
            {% set UNRETRACT = G11 | string %}
        {% else %}
            {% if verbose_enable is True %}
                {action_respond_info("[ADAPTIVE PURGE] is not using firmware retraction, it is recommended to configure it.")}
            {% endif %}

            {% set RETRACT = 'G1 E-.5 F2100' | string %}
            {% set UNRETRACT = 'G1 E.5 F2100' | string %}
        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State

        G92 E0                                                                      # Reset extruder
        G0 F{travel_speed}                                                          # Set travel speed
        G90                                                                         # Absolute positioning
        G0 X{purgeFirstX} Y{purgeFirstY}                                            # Move to purge position
        G0 Z{purge_height}                                                          # Move to purge Z height
        M83                                                                         # Relative extrusion mode
        G1 E{tip_distance} F{purge_move_speed}                                      # Move filament tip
        G1 X{purgeSecondX} Y{purgeSecondY} E{purge_amount} F{purge_move_speed}      # Purge line
        {RETRACT}                                                                   # Retract
        G0 X{firstP_x} Y{firstP_y} F{travel_speed}                                  # Rapid move to first print point to break string
        G92 E0                                                                      # Reset extruder distance
        M82                                                                         # Absolute extrusion mode

        RESTORE_GCODE_STATE NAME=Prepurge_State

    {% endif %}

        { action_respond_info("[PURGE SKIPPED] Purge Area to CLOSE to the edge") }

    {% endif %}
